 public class Worker : IHostedService, IDisposable
 {
     private readonly ILogger<Worker> _logger;
     private readonly POCConfig _config;
     private Timer? _timer = null;
     public Worker(ILogger<Worker> logger, POCConfig config)
     {
         _logger = logger;
         _config = config;
     }

     private void DoWork(object? state)
     {
         _logger.LogInformation($"Connecting to DB {_config.ConnectionString}");
         var connection = new SqlConnection(_config.ConnectionString);
         foreach (var sqlCommandText in _config.DMQueries)
         {
             _logger.LogInformation($"Running query {sqlCommandText}");
             IEnumerable<dynamic> rows = connection.Query<dynamic>(sqlCommandText);
             _logger.LogInformation($"Returned {rows.Count()} rows");
         }


     }


     public Task StartAsync(CancellationToken cancellationToken)
     {
         _timer = new Timer(DoWork, null, TimeSpan.Zero,
         TimeSpan.FromMinutes(2));
         return Task.CompletedTask;
     }

     public  void Dispose()
     {
         _timer?.Dispose();
     }

     public Task StopAsync(CancellationToken cancellationToken)
     { 
         _timer?.Change(Timeout.Infinite, 0);

         return Task.CompletedTask;
     }
 }
