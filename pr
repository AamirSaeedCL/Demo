SET NOCOUNT ON;
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

DECLARE @MonthsPerYear INT = 12;

-- Parse LastRunDateTime parameter from pipeline, ensure it is valid
DECLARE @LastRunDateTime DATETIME2 = TRY_CAST('@{activity(''Lookup the pipeline log table to fetch lastrundatetime'').output.value[0].LastRunDateTime}' AS DATETIME2);

IF @LastRunDateTime IS NULL
BEGIN
    THROW 50001, 'Invalid LastRunDateTime Value', 1;
END

-- Calculate aggregated monthly values for Expenditure, Income, Creditor, and Saving
WITH Expenditure AS (
    SELECT 
        sfsExp.SFSID, 
        CAST(ROUND(SUM(sfsExp.Amount * freq.MonthlyMultiplicationFactor / @MonthsPerYear), 2) AS DECIMAL(18,2)) AS TotalExpenditure
    FROM dbo.SFSExpenditure AS sfsExp WITH (NOLOCK)
    LEFT JOIN dbo.Frequency AS freq WITH (NOLOCK) 
        ON freq.FrequencyCode = sfsExp.FrequencyCode
    GROUP BY sfsExp.SFSID
),
Income AS (
    SELECT 
        sfsInc.SFSID, 
        CAST(ROUND(SUM(sfsInc.Amount * freq.MonthlyMultiplicationFactor / @MonthsPerYear), 2) AS DECIMAL(18,2)) AS TotalIncome
    FROM dbo.SFSIncome AS sfsInc WITH (NOLOCK)
    LEFT JOIN dbo.Frequency AS freq WITH (NOLOCK) 
        ON freq.FrequencyCode = sfsInc.FrequencyCode
    GROUP BY sfsInc.SFSID
),
Creditor AS (
    SELECT 
        cred.SFSID, 
        CAST(ROUND(SUM(cred.Amount * freq.MonthlyMultiplicationFactor / @MonthsPerYear), 2) AS DECIMAL(18,2)) AS TotalCreditor
    FROM dbo.SFSCreditor AS cred WITH (NOLOCK)
    LEFT JOIN dbo.Frequency AS freq WITH (NOLOCK) 
        ON freq.FrequencyCode = cred.FrequencyCode
    GROUP BY cred.SFSID
),
Saving AS (
    SELECT 
        sfsSave.SFSID, 
        CAST(ROUND(SUM(sfsSave.Amount * freq.MonthlyMultiplicationFactor / @MonthsPerYear), 2) AS DECIMAL(18,2)) AS TotalSaving
    FROM dbo.SFSSaving AS sfsSave WITH (NOLOCK)
    LEFT JOIN dbo.Frequency AS freq WITH (NOLOCK) 
        ON freq.FrequencyCode = sfsSave.FrequencyCode
    GROUP BY sfsSave.SFSID
)

-- Final SELECT statement combines all aggregated values and computes NetDisposableIncome
SELECT
    ps.SFSID AS SfsId,
    ps.GroupID AS CustomerGroupId,
    ps.OriginalConsumerID AS CustomerId,

    -- Total expenditure includes expenditure, creditor and saving sums rounded
    CAST(ROUND(
        COALESCE(exp.TotalExpenditure, 0.00)
        + COALESCE(crd.TotalCreditor, 0.00)
        + COALESCE(sav.TotalSaving, 0.00),
    2) AS DECIMAL(18,2)) AS TotalExpenditure,

    -- Total income
    COALESCE(inc.TotalIncome, 0.00) AS TotalIncome,

    -- Total creditor amount
    COALESCE(crd.TotalCreditor, 0.00) AS TotalCreditor,

    -- Total saving amount
    COALESCE(sav.TotalSaving, 0.00) AS TotalSaving,

    -- Net disposable income = Income - (Expenditure + Creditor + Saving)
    CAST(ROUND(
        COALESCE(inc.TotalIncome, 0.00) 
        - (
            COALESCE(exp.TotalExpenditure, 0.00)
            + COALESCE(crd.TotalCreditor, 0.00)
            + COALESCE(sav.TotalSaving, 0.00)
        ), 2) AS DECIMAL(18,2)) AS NetDisposableIncome,

    -- Metadata columns
    ps.CreatedByUser AS CreatedBy,
    ps.CreatedDateTime AS CreatedDate,
    ps.CompletedByUser AS CompletedBy,
    ps.CompletedDateTime AS CompletedDate,

    -- Use last updated datetime or default minimum if null
    COALESCE(ps.SFSLastUpdatedDateTime, '1900-01-01') AS UpsertDateTime

FROM dbo.SFS AS ps WITH (NOLOCK)

-- Join aggregated expenditure, income, creditor and saving values
LEFT JOIN Expenditure exp ON ps.SFSID = exp.SFSID
LEFT JOIN Income inc ON ps.SFSID = inc.SFSID
LEFT JOIN Creditor crd ON ps.SFSID = crd.SFSID
LEFT JOIN Saving sav ON ps.SFSID = sav.SFSID

-- Filter records updated after last run datetime to avoid duplicates
WHERE ps.SFSLastUpdatedDateTime > @LastRunDateTime

OPTION (RECOMPILE);

-- Reset transaction isolation level to default
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
