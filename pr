SET NOCOUNT ON;
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

-- Declare constants
DECLARE @PaymentTypeCode INT = 2;
DECLARE @PaymentReversalTypeCode INT = 9;
DECLARE @CDC_OP_INSERT INT = 2;
DECLARE @CDC_OP_UPDATE_AFTER INT = 4;

-- Replace this with dynamic expression from pipeline in production
DECLARE @LastRunDateTime DATETIME2 = '2025-01-01';

IF @LastRunDateTime IS NULL
BEGIN
    THROW 50001, 'Invalid LastRunDateTime Value', 1;
END

-- CTE to calculate total payments per account since last run
WITH CustomerAccountPayments AS (
    SELECT 
        cnsmr_accnt_id AS AccountId,
        SUM(cnsmr_accnt_pymnt_amnt) AS TotalPayments
    FROM [crs5_oltp].[cdc].[dbo_cnsmr_accnt_pymnt_jrnl_CT] WITH (NOLOCK)
    WHERE 
        bckt_trnsctn_typ_cd IN (@PaymentTypeCode, @PaymentReversalTypeCode)
        AND upsrt_dttm > @LastRunDateTime
    GROUP BY cnsmr_accnt_id
),

-- CTE to get the latest customer account balance rows with corresponding payments
CustomerAccountBalanceData AS (
    SELECT 
        cab.cnsmr_accnt_bal_id AS CustomerAccountBalanceId,
        cab.cnsmr_accnt_id AS AccountId,
        cab.cnsmr_accnt_bal_amnt AS OriginalBalance,
        cab.cnsmr_accnt_bal_amnt AS CurrentBalance,
        COALESCE(cap.TotalPayments, 0.00) AS TotalPayments,
        cab.upsrt_dttm AS UpsertDateTime,
        ROW_NUMBER() OVER (
            PARTITION BY cab.cnsmr_accnt_id 
            ORDER BY cab.upsrt_dttm DESC
        ) AS rn
    FROM [cdc].[dbo_cnsmr_accnt_bal_CT] cab WITH (NOLOCK)
    INNER JOIN CustomerAccountPayments cap 
        ON cab.cnsmr_accnt_id = cap.AccountId
    WHERE 
        cab.upsrt_dttm > @LastRunDateTime
        AND cab.__$operation IN (@CDC_OP_INSERT, @CDC_OP_UPDATE_AFTER)
)

-- Final result: return latest record per account
SELECT 
    CustomerAccountBalanceId,
    AccountId,
    OriginalBalance,
    CurrentBalance,
    TotalPayments,
    UpsertDateTime
FROM CustomerAccountBalanceData
WHERE rn = 1;

-- Reset transaction isolation level
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
