using CCM.DebtManager.ActionResult.Core.Entities;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CCM.DebtManager.ActionResult.Core.Repositories
{
    public interface IInteractionRepository
    {
        Task<List<Interaction>> GetInteractionsAsync(int consumerId, int skip, int take);
    }
}



using CCM.DebtManager.ActionResult.Core.Entities;
using CCM.DebtManager.ActionResult.Core.Repositories;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace CCM.DebtManager.ActionResult.Infrastructure.Repositories
{
    public class InteractionRepository : IInteractionRepository
    {
        private readonly IDbContextFactory<YourDbContext> _contextFactory;

        public InteractionRepository(IDbContextFactory<YourDbContext> contextFactory)
        {
            _contextFactory = contextFactory;
        }

        public async Task<List<Interaction>> GetInteractionsAsync(int consumerId, int skip, int take)
        {
            var sqlParameterConsumerID = new SqlParameter("@consumerID", consumerId);
            var sqlParameterSkip = new SqlParameter("@skip", skip);
            var sqlParameterTake = new SqlParameter("@take", take);

            using var context = _contextFactory.CreateDbContext();

            return await context.Interactions
                .FromSqlRaw(
                    "EXEC dbo.usp_ObtainInteractions @consumerID, @skip, @take",
                    sqlParameterConsumerID,
                    sqlParameterSkip,
                    sqlParameterTake
                )
                .ToListAsync();
        }
    }
}




private readonly IInteractionRepository _interactionRepository;

public YourClassName(IInteractionRepository interactionRepository)
{
    _interactionRepository = interactionRepository;
}

public async Task<ObjectResult> GetInteractions(GetInteractionsCommand command)
{
    List<Interaction> spResult;

    try
    {
        spResult = await _interactionRepository
            .GetInteractionsAsync(command.ConsumerID, command.Skip, command.Take);
    }
    catch (Exception)
    {
        return new ObjectResult("Unexpected error occurred") { StatusCode = 500 };
    }

    var mappedResult = spResult.Select(t => t.ToModel()).ToList();
    return new OkObjectResult(mappedResult);
}
