public async Task<ObjectResult> GetInteractions(GetInteractionsCommand command)
{
    var sqlParameterConsumerID = new SqlParameter("@consumerID", command.ConsumerID);
    var sqlParameterSkip = new SqlParameter("@skip", command.Skip);
    var sqlParameterTake = new SqlParameter("@take", command.Take);

    using var context = _contextFactory.CreateDbContext();

    List<Interaction> spResult = new List<Interaction>();

    try
    {
        spResult = await context.Interactions
            .FromSqlRaw(
                "EXEC dbo.usp_ObtainInteractions @consumerID, @skip, @take",
                sqlParameterConsumerID,
                sqlParameterSkip,
                sqlParameterTake
            )
            .ToListAsync();
    }
    catch (Exception ex)
    {
        return new ObjectResult("Unexpected error occurred") { StatusCode = 500 };
    }

    var mappedResult = spResult.Select(t => t.ToModel()).ToList();

    return new OkObjectResult(mappedResult);
}


public async Task<ObjectResult> GetInteractions(GetInteractionsCommand command)
{
    var sqlParameterConsumerID = new SqlParameter("@consumerID", command.ConsumerID);
    var sqlParameterSkip = new SqlParameter("@skip", command.Skip);
    var sqlParameterTake = new SqlParameter("@take", command.Take);

    using var context = _contextFactory.CreateDbContext();

    List<Interaction> spResult = new List<Interaction>();

    try
    {
        spResult = await context.Interactions
            .FromSqlRaw(
                "EXEC dbo.usp_ObtainInteractions @consumerID, @skip, @take",
                sqlParameterConsumerID,
                sqlParameterSkip,
                sqlParameterTake
            )
            .ToListAsync();
    }
    catch (Exception ex)
    {
        return new ObjectResult("Unexpected error occurred") { StatusCode = 500 };
    }

    var mappedResult = spResult.Select(t => t.ToModel()).ToList();

    return new OkObjectResult(mappedResult);
}
