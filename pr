services.AddDbContextFactory<InteractionContext>(options =>
{
    options.UseSqlServer(configuration.GetConnectionString("CabotApiInteractionStage"));
});

public ActionResultCommandHandler(
    ILogger<ActionResultCommandHandler> logger,
    InteractionContext interactionContext, // ❌ remove this
    IDbContextFactory<InteractionContext> contextFactory,
    DebtManagerContext debtManagerContext,
    IMemoryCache memoryCache)
{
    _logger = logger;
    _contextFactory = contextFactory;
    _debtManagerContext = debtManagerContext;
    _memoryCache = memoryCache;
}
public async Task<IEnumerable<InteractionMinimisedModel>> GetInteractions(GetInteractionsCommand command)
{
    var sqlParameterConsumerID = new SqlParameter("@consumerID", command.ConsumerID);
    var sqlParameterSkip = new SqlParameter("@skip", command.Skip);
    var sqlParameterTake = new SqlParameter("@take", command.Take);

    using var context = _contextFactory.CreateDbContext(); // ✅ new instance per request

    var spResult = await context.Interactions
        .FromSqlRaw(
            "EXEC dbo.usp_ObtainInteractions @consumerID, @skip, @take",
            sqlParameterConsumerID,
            sqlParameterSkip,
            sqlParameterTake)
        .ToListAsync();

    return spResult.Select(t => t.ToModel()).ToList();
}
