 [TestClass]
    public class WorkerTests
    {
        private Mock<ILogger<Worker>> _loggerMock;
        private Mock<IDatabaseService> _databaseServiceMock;
        private Mock<ITimerService> _timerServiceMock;
        private POCConfig _config;
        private Worker _worker;

        [TestInitialize]
        public void TestInitialize()
        {
            _loggerMock = new Mock<ILogger<Worker>>();
            _databaseServiceMock = new Mock<IDatabaseService>();
            _timerServiceMock = new Mock<ITimerService>();
            _config = new POCConfig { IntervalInMinutes = 5 };

            _worker = new Worker(_loggerMock.Object, _databaseServiceMock.Object, _timerServiceMock.Object, _config);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void Constructor_NullLogger_ThrowsArgumentNullException()
        {
            // Act
            var worker = new Worker(null, _databaseServiceMock.Object, _timerServiceMock.Object, _config);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void Constructor_NullDatabaseService_ThrowsArgumentNullException()
        {
            // Act
            var worker = new Worker(_loggerMock.Object, null, _timerServiceMock.Object, _config);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void Constructor_NullTimerService_ThrowsArgumentNullException()
        {
            // Act
            var worker = new Worker(_loggerMock.Object, _databaseServiceMock.Object, null, _config);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void Constructor_NullConfig_ThrowsArgumentNullException()
        {
            // Act
            var worker = new Worker(_loggerMock.Object, _databaseServiceMock.Object, _timerServiceMock.Object, null);
        }

        [TestMethod]
        public async Task StartAsync_ValidConfig_StartsTimerService()
        {
            // Act
            await _worker.StartAsync(CancellationToken.None);

            // Assert
            _timerServiceMock.Verify(t => t.Start(It.IsAny<Action>(), TimeSpan.Zero, TimeSpan.FromMinutes(5)), Times.Once);
        }

        [TestMethod]
        public async Task StartAsync_TimerServiceThrowsException_LogsErrorAndThrows()
        {
            // Arrange
            _timerServiceMock.Setup(t => t.Start(It.IsAny<Action>(), It.IsAny<TimeSpan>(), It.IsAny<TimeSpan>()))
                             .Throws(new InvalidOperationException());

            // Act & Assert
            await Assert.ThrowsExceptionAsync<InvalidOperationException>(() => _worker.StartAsync(CancellationToken.None));
            _loggerMock.Verify(l => l.LogError(It.IsAny<Exception>(), It.IsAny<string>()), Times.Once);
        }

        [TestMethod]
        public void DoWork_DatabaseServiceExecutesSuccessfully()
        {
            // Act
            var doWorkMethod = typeof(Worker).GetMethod("DoWork", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            doWorkMethod.Invoke(_worker, null);

            // Assert
            _databaseServiceMock.Verify(d => d.ExecuteQueries(), Times.Once);
        }

        [TestMethod]
        public void DoWork_DatabaseServiceThrowsException_LogsError()
        {
            // Arrange
            _databaseServiceMock.Setup(d => d.ExecuteQueries()).Throws(new InvalidOperationException());

            // Act
            var doWorkMethod = typeof(Worker).GetMethod("DoWork", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            doWorkMethod.Invoke(_worker, null);

            // Assert
            _loggerMock.Verify(l => l.LogError(It.IsAny<Exception>(), It.IsAny<string>()), Times.Once);
        }

        [TestMethod]
        public async Task StopAsync_StopsTimerService()
        {
            // Act
            await _worker.StopAsync(CancellationToken.None);

            // Assert
            _timerServiceMock.Verify(t => t.Stop(), Times.Once);
        }

        [TestMethod]
        public async Task StopAsync_TimerServiceThrowsException_LogsErrorAndThrows()
        {
            // Arrange
            _timerServiceMock.Setup(t => t.Stop()).Throws(new InvalidOperationException());

            // Act & Assert
            await Assert.ThrowsExceptionAsync<InvalidOperationException>(() => _worker.StopAsync(CancellationToken.None));
            _loggerMock.Verify(l => l.LogError(It.IsAny<Exception>(), It.IsAny<string>()), Times.Once);
        }

        [TestMethod]
        public void Dispose_DisposesTimerService()
        {
            // Act
            _worker.Dispose();

            // Assert
            _timerServiceMock.Verify(t => t.Dispose(), Times.Once);
        }

        [TestMethod]
        public void Dispose_TimerServiceThrowsException_LogsErrorAndThrows()
        {
            // Arrange
            _timerServiceMock.Setup(t => t.Dispose()).Throws(new InvalidOperationException());

            // Act
            Assert.ThrowsException<InvalidOperationException>(() => _worker.Dispose());

            // Assert
            _loggerMock.Verify(l => l.LogError(It.IsAny<Exception>(), It.IsAny<string>()), Times.Once);
        }
    }
