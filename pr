using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Microsoft.Extensions.Logging;
using Engage.DataSelection.Service.POC.Interfaces;
using Engage.DataSelection.Service.POC.Services;
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;

namespace Engage.DataSelection.Service.POC.Tests
{
    [TestClass]
    public class DatabaseServiceTests
    {
        private Mock<ILogger<DatabaseService>> _mockLogger;
        private Mock<IDbConnection> _mockDbConnection;
        private POCConfig _config;
        private DatabaseService _databaseService;

        [TestInitialize]
        public void Setup()
        {
            _mockLogger = new Mock<ILogger<DatabaseService>>();
            _mockDbConnection = new Mock<IDbConnection>();

            _config = new POCConfig
            {
                ConnectionString = "fake-connection-string",
                DMQueries = new List<string> { "SELECT * FROM Table1", "SELECT * FROM Table2" }
            };

            _databaseService = new DatabaseService(_mockLogger.Object, _config);

            // Setup Dapper Query method to return a mocked result
            _mockDbConnection.Setup(conn => conn.Query<dynamic>(It.IsAny<string>(), null, null, true, null, null))
                .Returns(new List<dynamic> { new { Id = 1 }, new { Id = 2 } });
        }

        [TestMethod]
        public void ExecuteQueries_SuccessfulExecution_LogsInformation()
        {
            // Arrange
            SqlConnectionFactory.SetConnectionFactory(() => _mockDbConnection.Object);

            // Act
            _databaseService.ExecuteQueries();

            // Assert
            _mockLogger.Verify(x => x.LogInformation(It.Is<string>(s => s.StartsWith("Running query"))), Times.Exactly(_config.DMQueries.Count()));
            _mockLogger.Verify(x => x.LogInformation(It.Is<string>(s => s.StartsWith("Returned"))), Times.Exactly(_config.DMQueries.Count()));
        }

        [TestMethod]
        [ExpectedException(typeof(Exception))]
        public void ExecuteQueries_ThrowsException_LogsError()
        {
            // Arrange
            _mockDbConnection.Setup(conn => conn.Query<dynamic>(It.IsAny<string>(), null, null, true, null, null))
                .Throws(new Exception("Test exception"));

            SqlConnectionFactory.SetConnectionFactory(() => _mockDbConnection.Object);

            // Act
            _databaseService.ExecuteQueries();

            // Assert
            _mockLogger.Verify(x => x.LogError(It.IsAny<Exception>(), It.IsAny<string>()), Times.Once);
        }
    }

    public static class SqlConnectionFactory
    {
        private static Func<IDbConnection> _connectionFactory;

        public static void SetConnectionFactory(Func<IDbConnection> connectionFactory)
        {
            _connectionFactory = connectionFactory;
        }

        public static IDbConnection CreateConnection()
        {
            if (_connectionFactory == null)
            {
                throw new InvalidOperationException("Connection factory not set.");
            }

            return _connectionFactory();
        }
    }

    public class POCConfig
    {
        public string ConnectionString { get; set; }
        public IEnumerable<string> DMQueries { get; set; }
    }
}
