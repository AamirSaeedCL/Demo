using Engage.DataMart.Database.EF;
using Engage.DataMart.Database.EF.Interfaces;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
public class Worker : IHostedService
{
    private readonly ILogger<Worker> _logger;
    private readonly DatamartConfig _config;
    private readonly IDacServiceWrapper _dacServiceWrapper;

    public Worker(ILogger<Worker> logger, DatamartConfig config, IDacServiceWrapper dacServiceWrapper)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _config = config ?? throw new ArgumentNullException(nameof(config));
        _dacServiceWrapper = dacServiceWrapper ?? throw new ArgumentNullException(nameof(dacServiceWrapper));
    }

    public Task StartAsync(CancellationToken cancellationToken)
    {
        try
        {              
            // Another way to deploy DACPAC through SQLPackage
            //var process = new Process();
            //process.StartInfo.FileName =_config.sqlPackagePath.ToString();
            //process.StartInfo.Arguments = $"/Action:Publish /SourceFile:\"{dacPacPath}\" /TargetConnectionString:\"{_config.ConnectionString.ToString()}\"";
            //process.StartInfo.RedirectStandardOutput = true;
            //process.StartInfo.UseShellExecute = false;
            //process.StartInfo.CreateNoWindow = true;
            //process.Start();
            //string result = process.StandardOutput.ReadToEnd();
            //process.WaitForExit();
            // Console.WriteLine(result);

            //DacServices dacServices = new DacServices(_config.ConnectionString);

            Console.WriteLine("Deployment Output:");

            // Event handler for messages
            _dacServiceWrapper.Message += (sender, e ) =>
            {
                Console.WriteLine($"{e.Message.MessageType} - {e.Message}");
            };

            // Event handler for progress
            _dacServiceWrapper.ProgressChanged += (sender, e) =>
            {
                Console.WriteLine($"Progress: {e.Status} - {e.Message}");
            };

            // Deploy the DACPAC
            _dacServiceWrapper.DeployDacPac(_config.DacPacFilePath, _config.databaseName, upgradeExisting: true);

            Console.WriteLine("Deployment Completed.");

        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while starting the worker.");
            throw;
        }

        return Task.CompletedTask;
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        throw new NotImplementedException();
    }
}
    
