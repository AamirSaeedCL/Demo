DECLARE @from_lsn BINARY(10);
DECLARE @to_lsn   BINARY(10);
DECLARE @min_valid_lsn BINARY(10) = sys.fn_cdc_get_min_lsn('dbo_cnsmr_tag');

-- Define LSN window (for incremental processing)
-- You can replace this with a stored last LSN from a tracking table
SET @from_lsn = sys.fn_cdc_get_min_lsn('dbo_cnsmr_tag');
SET @to_lsn   = sys.fn_cdc_get_max_lsn();

-- Ensure valid LSN
IF @from_lsn < @min_valid_lsn OR @from_lsn IS NULL
    SET @from_lsn = @min_valid_lsn;

WITH CDCData AS (
    SELECT 
        ct.cnsmr_id,
        ct.tag_id,
        ct.cnsmr_tag_assgn_dt,
        ct.cnsmr_tag_sft_delete_flg,
        ct.upsrt_dttm,
        ct.__$operation,
        ct.__$start_lsn
    FROM cdc.fn_cdc_get_all_changes_dbo_cnsmr_tag(@from_lsn, @to_lsn, 'all') AS ct
    WHERE ct.__$operation IN (2, 4)  -- inserts or updates (exclude deletes if not required)
),
TagData AS (
    SELECT
        c.cnsmr_id,
        c.cnsmr_idntfr_lgcy_txt,
        t.tag_typ_id,
        UPPER(tt.tag_typ_shrt_nm) AS tag_typ_shrt_nm,
        CDC.cnsmr_tag_assgn_dt,
        CASE WHEN CDC.cnsmr_tag_sft_delete_flg = 'Y' THEN CDC.upsrt_dttm END AS tag_removed_dt,
        CASE WHEN CDC.cnsmr_tag_sft_delete_flg = 'Y' THEN 0 ELSE 1 END AS tag_active,
        CDC.cnsmr_tag_sft_delete_flg,
        CDC.upsrt_dttm
    FROM cnsmr c WITH (NOLOCK)
    LEFT JOIN CDCData CDC
        ON CDC.cnsmr_id = c.cnsmr_id
    LEFT JOIN tag t WITH (NOLOCK)
        ON t.tag_id = CDC.tag_id
    LEFT JOIN tag_typ tt WITH (NOLOCK)
        ON t.tag_typ_id = tt.tag_typ_id
    WHERE UPPER(tt.tag_typ_shrt_nm) IN (
         'DDRETCD', 'DIAL_TAG', 'DIGITAL', 'PAYPHASE', 'PHASE', 
         'PLANSTAT', 'RMDTN', 'PREDEF', 'SMS', 'PLATSTAT'
    )
)
