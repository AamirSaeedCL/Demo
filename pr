-- Declare variables for configuration
DECLARE @responseCode VARCHAR(16) = '525Plus'
DECLARE @completedStatus VARCHAR(20) = 'COMPLETED'

-- Create a table variable for datamarts to make maintenance easier
DECLARE @Datamarts TABLE (
    DatamartName VARCHAR(50),
    JobDatabase VARCHAR(50),
    DatamartDatabase VARCHAR(50)
)

-- Insert datamart configurations
INSERT INTO @Datamarts (DatamartName, JobDatabase, DatamartDatabase)
VALUES 
    ('CSDE_DATAMART', 'CSDE_JOB', 'CSDE_DATAMART'),
    ('CSDE_DATAMART_1', 'CSDE_JOB_1', 'CSDE_DATAMART_1'),
    ('CSDE_DATAMART_2', 'CSDE_JOB_2', 'CSDE_DATAMART_2'),
    ('CSDE_DATAMART_3', 'CSDE_JOB_3', 'CSDE_DATAMART_3')

-- Drop temporary tables if they exist
DROP TABLE IF EXISTS #CompletedDate1
DROP TABLE IF EXISTS #CompletedDate2

-- Create index-optimized temp table
CREATE TABLE #CompletedDate1 (
    datamart VARCHAR(50),
    LastCompletedRunDate DATETIME,
    INDEX IX_CompletedDate1_datamart CLUSTERED (datamart)
)

-- Dynamic SQL to populate completion dates
DECLARE @SQL NVARCHAR(MAX) = ''
SELECT @SQL = @SQL + 
    'INSERT INTO #CompletedDate1
    SELECT TOP 1 ''' + DatamartName + ''', end_time, ''' + @completedStatus + '''
    FROM ' + JobDatabase + '.dbo.BATCH_JOB_EXECUTION WITH (NOLOCK)
    WHERE [status] = @completedStatus
    ORDER BY end_time DESC
    UNION ALL '
FROM @Datamarts

-- Remove trailing UNION ALL
SET @SQL = LEFT(@SQL, LEN(@SQL) - 10)
EXEC sp_executesql @SQL, N'@completedStatus VARCHAR(20)', @completedStatus

-- Create index-optimized temp table for consumer data
CREATE TABLE #CompletedDate2 (
    Datamart VARCHAR(50),
    LEGACY_ID VARCHAR(100),
    CONSUMER_ID VARCHAR(100),
    ACCOUNT_ID VARCHAR(100),
    ownership VARCHAR(16),
    INDEX IX_CompletedDate2_Datamart CLUSTERED (Datamart)
)

-- Dynamic SQL for consumer data
SET @SQL = ''
SELECT @SQL = @SQL + 
    'INSERT INTO #CompletedDate2
    SELECT DISTINCT ''' + DatamartName + ''',
        c.[LEGACY_ID],
        c.[CONSUMER_ID],
        c.[ACCOUNT_ID],
        rc.[CODE]
    FROM ' + DatamartDatabase + '.dbo.CONSUMER c WITH (NOLOCK)
    INNER JOIN ' + DatamartDatabase + '.dbo.CONSUMER_DECISIONS cd WITH (NOLOCK)
        ON cd.CONSUMER_ID = c.CONSUMER_ID
    INNER JOIN ' + DatamartDatabase + '.dbo.RESPONSE_CODE rc WITH (NOLOCK)
        ON rc.FK_ASS_RESP_CODES_CONSUM_DECIS = cd.ID
        AND rc.CODE = @responseCode
    UNION ALL '
FROM @Datamarts

-- Remove trailing UNION ALL
SET @SQL = LEFT(@SQL, LEN(@SQL) - 10)
EXEC sp_executesql @SQL, N'@responseCode VARCHAR(16)', @responseCode

-- Final result with optimized join
SELECT 
    c2.CONSUMER_ID,
    c2.LEGACY_ID,
    c2.ACCOUNT_ID,
    c2.ownership,
    c1.LastCompletedRunDate AS ownershipdate
FROM #CompletedDate2 c2 WITH (NOLOCK)
LEFT JOIN #CompletedDate1 c1 WITH (NOLOCK)
    ON c2.Datamart = c1.datamart
OPTION (RECOMPILE)
