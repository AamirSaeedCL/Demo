[OpenApiOperation(
    operationId: "getLastRpc",
    tags: new[] { "Interactions" },
    Description = "Get the most recent RPC interaction for a given ConsumerId."
)]
[OpenApiSecurity("getLastRpc", SecuritySchemeType.OAuth2, Flows = typeof(ClientCredentialAuthFlow), Name = "authorization", In = OpenApiSecurityLocationType.Header)]
[OpenApiParameter(name: "ocp-apim-subscription-key-south", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "south key header")]
[OpenApiParameter(name: "ocp-apim-subscription-key-west", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "west key header")]
[OpenApiParameter(name: "correlation-id", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "correlation-id header")]
[OpenApiParameter(name: "username", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "username header")]
[OpenApiParameter(name: "origin", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "origin header")]
[OpenApiParameter(name: "consumerId", In = ParameterLocation.Path, Required = true, Type = typeof(long), Description = "The **consumerId** parameter")]
[OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: "application/json", bodyType: typeof(InteractionMinimisedModel))]
[Function("getLastRpc")]
public async Task<IActionResult> GetLastRpc(
    [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "consumer/{consumerId}/last/rpc")]
    HttpRequest request,
    long consumerId)
{
    var command = await request.As<ConsumerCommand>();
    command.ConsumerID = consumerId;

    if (command.IsMissingMetaData(out string errorMessage))
        return new BadRequestObjectResult(errorMessage);

    if (!await command.Validate(out string validationErrorMessage))
        return new BadRequestObjectResult(validationErrorMessage);

    using (var scope = _logger.BeginScope(command.CorrelationId))
    {
        try
        {
            return await _functionManager.ExecuteGet<ConsumerCommand, InteractionMinimisedModel>(
                request.HttpContext,
                (cmd) => _interactionAcl.GetLastRpcInteraction(cmd)
            );
        }
        catch (SqlException ex) when (ex.Number == -2)
        {
            _logger.LogError(ex, $"SQL Timeout: {nameof(GetLastRpc)}");
            return new StatusCodeResult((int)HttpStatusCode.RequestTimeout);
        }
    }
}
