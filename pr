SET NOCOUNT ON;
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

-- CDC operation constants for insert and update-after
DECLARE 
    @CDC_OP_INSERT INT = 2,
    @CDC_OP_UPDATE_AFTER INT = 4;

-- LastRunDateTime parameter (replace hardcoded value with pipeline param as needed)
DECLARE @LastRunDateTime DATETIME2 = '2025-01-01'; 
-- Example to use pipeline parameter:
-- DECLARE @LastRunDateTime DATETIME2 = TRY_CAST('@{activity(''Lookup the pipeline log table to fetch lastrundatetime'').output.value[0].LastRunDateTime}' AS DATETIME2);

-- Validate LastRunDateTime parameter
IF @LastRunDateTime IS NULL
BEGIN
    THROW 50001, 'Invalid LastRunDateTime Value', 1;
END

-- CTE to rank accounts by most recent UpsertDateTime per AccountId
WITH RankedAccounts AS (
    SELECT
        CA.cnsmr_accnt_id AS AccountId,
        CA.cnsmr_id AS CustomerId,
        CAST(NULL AS UNIQUEIDENTIFIER) AS CustomerGroupId,
        C.crdtr_id AS CreditorID,
        C.crdtr_nm AS CreditorName,
        C.crdtr_shrt_nm AS CreditorShortName,
        C.crdtr_dscrptn_txt AS AccountDescription,
        CA.upsrt_dttm AS UpsertDateTime,
        ROW_NUMBER() OVER (
            PARTITION BY CA.cnsmr_accnt_id
            ORDER BY CA.upsrt_dttm DESC
        ) AS rn
    FROM 
        dbo.crdtr AS C WITH (NOLOCK)
        INNER JOIN cdc.dbo_cnsmr_accnt_CT AS CA WITH (NOLOCK) 
            ON CA.crdtr_id = C.crdtr_id
    WHERE 
        CA.upsrt_dttm > @LastRunDateTime
        AND CA.__$operation IN (@CDC_OP_INSERT, @CDC_OP_UPDATE_AFTER)
)

-- Select only the latest record per AccountId (rn = 1)
SELECT
    AccountId,
    CustomerId,
    CustomerGroupId,
    CreditorID,
    CreditorName,
    CreditorShortName,
    AccountDescription,
    UpsertDateTime
FROM RankedAccounts
WHERE rn = 1
OPTION (RECOMPILE);

-- Reset transaction isolation level to default
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
