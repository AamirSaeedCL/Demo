Should have following features:
Exception Handling:
Implement comprehensive exception handling across all service methods to ensure errors are properly logged and managed without disrupting the service workflow. This includes catching and logging specific exceptions where necessary and ensuring that the service can recover or fail gracefully.

Configurable Interval:
Move the 2-minute interval configuration to an external configuration file. This allows for greater flexibility and easier adjustments without the need to modify the codebase. Ensure that the interval value is read from the configuration file at runtime and used to control the timer for periodic tasks.

Codebase Refactoring:
Refactor the existing codebase to improve its structure, readability, and adherence to modern C# best practices, including:

Adopting SOLID Principles: Ensure the code follows SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion) to enhance maintainability and scalability.

Async/Await Best Practices: Ensure that all asynchronous operations utilize async/await for better performance and responsiveness.

Dependency Injection: Make sure that all dependencies are injected through constructors, promoting testability and decoupling.

Utilizing .NET 8 Features: Leverage the latest features and enhancements provided by .NET 8, such as IAsyncDisposable for async resource management and PeriodicTimer for periodic tasks.

Logging: Enhance logging to provide detailed and actionable insights into the service's operation, making it easier to diagnose and troubleshoot issues.

Configuration Management: Use the built-in configuration system of .NET to manage application settings, ensuring that configuration values are easy to manage and override in different environments.
These changes aim to improve the overall quality, performance, and maintainability of the "Engage.Dataselection.Service.POC" worker service.
