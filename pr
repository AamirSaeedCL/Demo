System.NotSupportedException: 'Unsupported expression: conn => conn.Query<object>(It.IsAny<string>(), null, null, True, null, null)
Extension methods (here: SqlMapper.Query) may not be used in setup / verification expressions.'


  public class DatabaseServiceTests
  {
      private Mock<ILogger<DatabaseService>> _mockLogger;
      private Mock<IDbConnection> _mockDbConnection;
      private POCConfig _config;
      private DatabaseService _databaseService;

      [TestInitialize]
      public void Setup()
      {
          _mockLogger = new Mock<ILogger<DatabaseService>>();
          _mockDbConnection = new Mock<IDbConnection>();
          _config = new POCConfig
          {
              ConnectionString = "Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;",
              DMQueries = new List<string> { "SELECT * FROM Table WHERE Date > DATEADD(MINUTE, {interval}, GETDATE())" },
              IntervalInMinutes = 10
          };

          _databaseService = new DatabaseService(_mockLogger.Object, _config);
      }

      [TestMethod]
      [ExpectedException(typeof(ArgumentNullException))]
      public void Constructor_NullLogger_ThrowsArgumentNullException()
      {
          // Act
          var service = new DatabaseService(null, _config);
      }

      [TestMethod]
      [ExpectedException(typeof(ArgumentNullException))]
      public void Constructor_NullConfig_ThrowsArgumentNullException()
      {
          // Act
          var service = new DatabaseService(_mockLogger.Object, null);
      }

      [TestMethod]
      public void ExecuteQueries_SuccessfulExecution_LogsInformation()
      {
          // Arrange
          var mockQueryResult = new List<dynamic> { new { Id = 1, Name = "Test" } };

          // Mock Dapper's Query method
          _mockDbConnection
              .Setup(conn => conn.Query<dynamic>(It.IsAny<string>(), null, null, true, null, null))
              .Returns(mockQueryResult);

          // Mock the SqlConnectionFactory to return the mock connection
          SqlConnectionFactory.SetConnectionFactory(() => _mockDbConnection.Object);

          // Act
          _databaseService.ExecuteQueries();

          // Assert
          _mockLogger.Verify(
              x => x.LogInformation(It.Is<string>(s => s.StartsWith("Running query"))),
              Times.Exactly(_config.DMQueries.Count));

          _mockLogger.Verify(
              x => x.LogInformation(It.Is<string>(s => s.StartsWith("Returned"))),
              Times.Exactly(_config.DMQueries.Count));
      }

      //[TestMethod]
      //public void ExecuteQueries_ThrowsException_LogsError()
      //{
      //    // Arrange
      //    var exception = new SqlException();
      //    _mockDbConnection
      //        .Setup(conn => conn.Query<dynamic>(It.IsAny<string>(), null, null, true, null, null))
      //        .Throws(exception);

      //    // Mock the SqlConnectionFactory to return the mock connection
      //    SqlConnectionFactory.SetConnectionFactory(() => _mockDbConnection.Object);

      //    // Act & Assert
      //    Assert.ThrowsException<SqlException>(() => _databaseService.ExecuteQueries());

      //    _mockLogger.Verify(
      //        x => x.LogError(exception, "An error occurred while executing queries."),
      //        Times.Once);
      //}
  }
