@if(
    equals(pipeline().parameters.pEnv, 'dev'),
    '-- Declare variables for configuration
    DECLARE @SchemaName VARCHAR(50) = ''dbo'';
    DECLARE @ResponseCode VARCHAR(16) = ''525Plus'';
    DECLARE @BatchStatus VARCHAR(20) = ''COMPLETED'';
    DECLARE @DataMartName VARCHAR(50) = ''CSDE_DATAMART'';

    -- Create temp table with primary key for better performance
    DROP TABLE IF EXISTS #LastCompletedRun;
    CREATE TABLE #LastCompletedRun (
        DataMart VARCHAR(50) PRIMARY KEY CLUSTERED,
        LastCompletedRunDate DATETIME
    );

    -- Create temp table with clustered index for better join performance
    DROP TABLE IF EXISTS #ConsumerOwnership;
    CREATE TABLE #ConsumerOwnership (
        DataMart VARCHAR(50),
        LEGACY_ID VARCHAR(50),
        CONSUMER_ID BIGINT,
        ACCOUNT_ID BIGINT,
        Ownership VARCHAR(16),
        INDEX CIX_ConsumerOwnership CLUSTERED (DataMart, CONSUMER_ID)
    );

    -- Set session level settings for performance
    SET NOCOUNT ON;
    SET ARITHABORT ON;
    SET XACT_ABORT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        -- Get latest completed run info
        INSERT INTO #LastCompletedRun
        SELECT TOP 1 
            @DataMartName AS DataMart,
            end_time AS LastCompletedRunDate
        FROM [CSDE_JOB].[dbo].[BATCH_JOB_EXECUTION] WITH (NOLOCK)
        WHERE [status] = @BatchStatus
        ORDER BY end_time DESC;

        -- Get consumer ownership data with optimized joins
        INSERT INTO #ConsumerOwnership WITH (TABLOCK)
        SELECT DISTINCT
            @DataMartName AS DataMart,
            c.LEGACY_ID,
            c.CONSUMER_ID,
            c.ACCOUNT_ID,
            rc.CODE AS Ownership
        FROM [CSDE_DATAMART].[dbo].[CONSUMER] c WITH (NOLOCK)
        INNER JOIN [CSDE_DATAMART].[dbo].[CONSUMER_DECISIONS] cd WITH (NOLOCK)
            ON cd.CONSUMER_ID = c.CONSUMER_ID
        INNER JOIN [CSDE_DATAMART].[dbo].[RESPONSE_CODE] rc WITH (NOLOCK)
            ON rc.FK_ASS_RESP_CODES_CONSUM_DECIS = cd.ID
            AND rc.CODE = @ResponseCode
        OPTION (HASH JOIN, OPTIMIZE FOR (@ResponseCode = ''525Plus'')); 

        -- Final result set with optimized join
        SELECT 
            co.CONSUMER_ID,
            co.LEGACY_ID,
            co.ACCOUNT_ID,
            co.Ownership,
            lcr.LastCompletedRunDate AS OwnershipDate
        FROM #ConsumerOwnership co
        LEFT JOIN #LastCompletedRun lcr
            ON co.DataMart = lcr.DataMart
        OPTION (FORCE ORDER, FAST 50);

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
        
        THROW;
    END CATCH;

    -- Cleanup
    BEGIN
        DROP TABLE IF EXISTS #LastCompletedRun;
        DROP TABLE IF EXISTS #ConsumerOwnership;
        SET NOCOUNT OFF;
    END',
    if(
        equals(pipeline().parameters.pEnv, 'test'),
        '-- Declare variables for configuration
        DECLARE @responseCode VARCHAR(16) = ''525Plus'';
        DECLARE @completedStatus VARCHAR(20) = ''COMPLETED'';

        -- Create a table variable for datamarts to make maintenance easier
        DECLARE @Datamarts TABLE (
            DatamartName VARCHAR(50),
            JobDatabase VARCHAR(50),
            DatamartDatabase VARCHAR(50)
        );

        -- Insert datamart configurations
        INSERT INTO @Datamarts (DatamartName, JobDatabase, DatamartDatabase)
        VALUES 
            (''CSDE_DATAMART'', ''CSDE_JOB'', ''CSDE_DATAMART''),
            (''CSDE_DATAMART_1'', ''CSDE_JOB_1'', ''CSDE_DATAMART_1''),
            (''CSDE_DATAMART_2'', ''CSDE_JOB_2'', ''CSDE_DATAMART_2''),
            (''CSDE_DATAMART_3'', ''CSDE_JOB_3'', ''CSDE_DATAMART_3'');

        -- Drop temporary tables if they exist
        DROP TABLE IF EXISTS #CompletedDate1;
        DROP TABLE IF EXISTS #CompletedDate2;

        -- Create index-optimized temp table
        CREATE TABLE #CompletedDate1 (
            datamart VARCHAR(50),
            LastCompletedRunDate DATETIME,
            INDEX IX_CompletedDate1_datamart CLUSTERED (datamart)
        );

        -- Dynamic SQL to populate completion dates
        DECLARE @SQL NVARCHAR(MAX) = '''';
        SELECT @SQL = @SQL + 
            ''INSERT INTO #CompletedDate1
            SELECT TOP 1 '''''' + DatamartName + '''''', end_time, '''''' + @completedStatus + ''''''
            FROM '' + JobDatabase + ''.dbo.BATCH_JOB_EXECUTION WITH (NOLOCK)
            WHERE [status] = @completedStatus
            ORDER BY end_time DESC
            UNION ALL ''
        FROM @Datamarts;

        -- Remove trailing UNION ALL
        SET @SQL = LEFT(@SQL, LEN(@SQL) - 10);
        EXEC sp_executesql @SQL, N''@completedStatus VARCHAR(20)'', @completedStatus;

        -- Create index-optimized temp table for consumer data
        CREATE TABLE #CompletedDate2 (
            Datamart VARCHAR(50),
            LEGACY_ID VARCHAR(100),
            CONSUMER_ID VARCHAR(100),
            ACCOUNT_ID VARCHAR(100),
            ownership VARCHAR(16),
            INDEX IX_CompletedDate2_Datamart CLUSTERED (Datamart)
        );

        -- Dynamic SQL for consumer data
        SET @SQL = '''';
        SELECT @SQL = @SQL + 
            ''INSERT INTO #CompletedDate2
            SELECT DISTINCT '''''' + DatamartName + '''''',
                c.[LEGACY_ID],
                c.[CONSUMER_ID],
                c.[ACCOUNT_ID],
                rc.[CODE]
            FROM '' + DatamartDatabase + ''.dbo.CONSUMER c WITH (NOLOCK)
            INNER JOIN '' + DatamartDatabase + ''.dbo.CONSUMER_DECISIONS cd WITH (NOLOCK)
                ON cd.CONSUMER_ID = c.CONSUMER_ID
            INNER JOIN '' + DatamartDatabase + ''.dbo.RESPONSE_CODE rc WITH (NOLOCK)
                ON rc.FK_ASS_RESP_CODES_CONSUM_DECIS = cd.ID
                AND rc.CODE = @responseCode
            UNION ALL ''
        FROM @Datamarts;

        -- Remove trailing UNION ALL
        SET @SQL = LEFT(@SQL, LEN(@SQL) - 10);
        EXEC sp_executesql @SQL, N''@responseCode VARCHAR(16)'', @responseCode;

        -- Final result with optimized join
        SELECT 
            c2.CONSUMER_ID,
            c2.LEGACY_ID,
            c2.ACCOUNT_ID,
            c2.ownership,
            c1.LastCompletedRunDate AS ownershipdate
        FROM #CompletedDate2 c2 WITH (NOLOCK)
        LEFT JOIN #CompletedDate1 c1 WITH (NOLOCK)
            ON c2.Datamart = c1.datamart
        OPTION (RECOMPILE);',
        '-- Handle other environments here as needed'
    )
)
