using CCM.Auth.Contracts;
using CCM.Core.Extensions;
using CCM.Core.Models;
using CCM.DebtManager.ActionResult.Core.Commands;
using CCM.DebtManager.ActionResult.Core.Contracts;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Net.Http;
using System.Threading.Tasks;

namespace CCM.DebtManager.ActionResult.Api.Client.Services
{
    public class ActionResultApiClient : IActionResultApiClient
    {
        private readonly HttpClient _httpClient;
        private readonly IAuthorise _authorise;

        public ActionResultApiClient(HttpClient httpClient, IAuthorise authorise)
        {
            _httpClient = httpClient;
            _authorise = authorise;
        }

        public async Task<ObjectResult> GetActionResultLogRecords(GetActionResultLogRecordsCommand command)
        {
            if (command is null) 
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.GetWithCCMHeadersAsync($"search/{command.ConsumerId}/{command.ActionCodeShortValueText}/{command.ResultCodeShortValueText}/{command.MessagePart}/{command.Num}", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> GetARLogRecords(GetARLogRecordsCommand command)
        {
            if (command is null) 
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.GetWithCCMHeadersAsync($"search/{command.ConsumerId}/action/{command.ActionCodeShortValueText}/result/{command.ResultCodeShortValueText}/take/{command.Take}/skip/{command.Skip}", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> GetActionResultLogByConsumer(LinkedConsumerCallContext command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.PutWithCCMHeadersAsync($"search/{command.ConsumerID}", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> GetActionResultLogByConsumerPaginated(PaginatedCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.PutWithCCMHeadersAsync($"search/{command.ConsumerID}/take/{command.Take}/skip/{command.Skip}", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> Log(CreateActionResultLogCommand command)
        {
            if (command is null) 
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.PostWithCCMHeadersAsync("log", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> LogAccount(CreateActionResultLogAccountCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.PostWithCCMHeadersAsync("log/account", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> LogMultiple(CreateActionResultLogMultipleCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.PostWithCCMHeadersAsync("log/multiple", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> LogByActivity(CreateActionResultByActivityCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.PostWithCCMHeadersAsync($"log/activity/{command.ActivityName}", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> LogByTemplate(CreateActionResultByTemplateCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.PostWithCCMHeadersAsync($"log/template/{command.TemplateName}", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> GetActiveTemplates(CallContext callContext)
        {
            if (callContext is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(callContext);
            var response = await _httpClient.GetWithCCMHeadersAsync($"template/active", callContext);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> UpdateTemplate(UpdateActionResultTemplateCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.PutWithCCMHeadersAsync($"template", command);
            return response.ToObjectResult();
        }

        public async  Task<ObjectResult> InsertTemplate(UpdateActionResultTemplateCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.PostWithCCMHeadersAsync($"template", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> DeleteTemplate(DeleteActionResultTemplateCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.AddCCMHeaders(command).DeleteAsync($"template");
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> GetActiveActivities(CallContext callContext)
        {
            if (callContext is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(callContext);
            var response = await _httpClient.GetWithCCMHeadersAsync($"activity/active", callContext);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> UpdateActivity(UpdateConsumerActivityCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.PutWithCCMHeadersAsync($"activity", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> InsertActivity(UpdateConsumerActivityCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.PostWithCCMHeadersAsync($"activity", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> DeleteActivity(DeleteConsumerActivityCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.AddCCMHeaders(command).DeleteAsync($"activity");
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> GetTemplateByName(GetActionResultTemplateCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.GetWithCCMHeadersAsync($"template/{command.TemplateName}", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> GetActivityByName(GetConsumerActivityCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.GetWithCCMHeadersAsync($"activity/{command.ActivityName}", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> GetAllTemplates(CallContext callContext)
        {
            if (callContext is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(callContext);
            var response = await _httpClient.GetWithCCMHeadersAsync($"template/all", callContext);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> GetAllActivities(CallContext callContext)
        {
            if (callContext is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(callContext);
            var response = await _httpClient.GetWithCCMHeadersAsync($"activity/all", callContext);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> ValidateCodes(ValidateActionAndResultCodesCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.GetWithCCMHeadersAsync($"consumerReference/{command.ConsumerReference}", command);
            return response.ToObjectResult();
        }

        public async Task<ObjectResult> LogByUserActionConfig(CreateActionResultByUserActionConfigCommand command)
        {
            if (command is null)
                throw new ArgumentNullException("command");

            _httpClient.DefaultRequestHeaders.Authorization = await _authorise.GetAuthorisationHeader(command);
            var response = await _httpClient.PostWithCCMHeadersAsync($"log/useractionconfig", command);
            return response.ToObjectResult();
        }
    }
}
