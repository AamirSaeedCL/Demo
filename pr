public class TestLogger : ILogger<DatabaseService>
{
    public List<string> LogMessages { get; } = new List<string>();

    public IDisposable BeginScope<TState>(TState state) => null;

    public bool IsEnabled(LogLevel logLevel) => true;

    public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
    {
        LogMessages.Add(formatter(state, exception));
    }
}




[TestMethod]
public void ExecuteQueries_SuccessfulExecution_LogsInformation()
{
    // Arrange
    var mockQueryResult = new List<dynamic> { new { Id = 1, Name = "Test" } };
    var mockDatabaseClient = new Mock<IDatabaseClient>();

    mockDatabaseClient
        .Setup(client => client.Query(It.IsAny<string>(), null))
        .Returns(mockQueryResult);

    var testLogger = new TestLogger();
    _databaseService = new DatabaseService(testLogger, _config, mockDatabaseClient.Object);

    // Act
    _databaseService.ExecuteQueries();

    // Assert
    Assert.IsTrue(testLogger.LogMessages.Any(m => m.StartsWith("Running query")));
    Assert.IsTrue(testLogger.LogMessages.Any(m => m.StartsWith("Returned")));
}
