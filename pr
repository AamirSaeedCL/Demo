
 public class DacServiceWrapper : IDacServiceWrapper, IDisposable
 {
     private readonly ILogger<Worker> _logger;
     private readonly DacServices _dacServices;

     public DacServiceWrapper(ILogger<Worker> logger, string connectionString)
     {
         _dacServices = new DacServices(connectionString);
         _logger = logger ?? throw new ArgumentNullException(nameof(logger));

         // Hook the DacServices events to the wrapper's events
         _dacServices.ProgressChanged += (sender, e) => ProgressChanged?.Invoke(this, e);
         _dacServices.Message += (sender, e) => Message?.Invoke(this, e);
     }

     public void DeployDacPac(string dacPacPath, string databaseName, bool upgradeExisting)
     {
         var dacpac = DacPackage.Load(dacPacPath);
         _dacServices.Deploy(dacpac, databaseName, upgradeExisting);
     }


     public event EventHandler<DacProgressEventArgs> ProgressChanged;
     public event EventHandler<DacMessageEventArgs> Message;

     public void Dispose()
     {
         try
         {
             _dacServices?.Dispose();
         }
         catch (Exception ex)
         {
             _logger.LogError(ex, "An error occurred while disposing the dac service.");
             throw;
         }
     }
 }
