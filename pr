namespace CCM.Api.Operations
{
    public class ActionResultOperations
    {
        /*WARNING DM9 Entities referenced in the client project, no mapping from the Entity to the Model for ConsumerAccountActionResultLogDesc
         I have left this in as it may impact consumers of this api if we change the entity to the model.
         */
        private readonly IActionResultApiClient _client;
        private readonly IFunctionManager _functionManager;
        private readonly ValidationMaxCodeConfiguration _validationMaxCodeConfiguration;
        private readonly ILogger<ActionResultOperations> _logger;

        public ActionResultOperations(IActionResultApiClient client, IFunctionManager functionManager, ValidationMaxCodeConfiguration validationMaxCodeConfiguration, ILogger<ActionResultOperations> logger)
        {
            _client = client;
            _functionManager = functionManager;
            _validationMaxCodeConfiguration = validationMaxCodeConfiguration;
            _logger = logger;
        }

      

        [OpenApiOperation(operationId: "getInteractions", tags: new[] { "Interactions" }, Description = "Get Interactions by ConsumerId with pagination.")]
        [OpenApiSecurity("getInteractions", SecuritySchemeType.OAuth2, Flows = typeof(ClientCredentialAuthFlow), Name = "authorization", In = OpenApiSecurityLocationType.Header)]
        [OpenApiParameter(name: "ocp-apim-subscription-key-south", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "south key header")]
        [OpenApiParameter(name: "ocp-apim-subscription-key-west", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "west key header")]
        [OpenApiParameter(name: "correlation-id", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "correlation-id header")]
        [OpenApiParameter(name: "username", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "username header")]
        [OpenApiParameter(name: "origin", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "origin header")]
        [OpenApiParameter(name: "consumerId", In = ParameterLocation.Path, Required = true, Type = typeof(long), Description = "The **consumerId** parameter")]
        [OpenApiParameter(name: "skip", In = ParameterLocation.Path, Required = true, Type = typeof(int), Description = "The **skip** parameter")]
        [OpenApiParameter(name: "take", In = ParameterLocation.Path, Required = true, Type = typeof(int), Description = "The **take** parameter")]
        [OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: "application/json", bodyType: typeof(List<InteractionMinimisedModel>))]
        [Function("getInteractions")]
        public async Task<IActionResult> GetInteractions(
           [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "consumer/{consumerId}/skip/{skip}/take/{take}")]
            HttpRequest request)
        {
            var command = await request.As<GetInteractionsCommand>();

            if (command.IsMissingMetaData(out string errorMessage))
                return new BadRequestObjectResult(errorMessage);

            if (!await command.Validate(out string validationErrorMessage))
                return new BadRequestObjectResult(validationErrorMessage);

            using (var scope = _logger.BeginScope(command.CorrelationId))
            {
                return await _functionManager.ExecuteGet<GetInteractionsCommand, List<InteractionMinimisedModel>>(
                    request.HttpContext,
                    (cmd) => _client.GetInteractions(cmd)
                );
            }
        }

        [OpenApiOperation(operationId: "getLastRpc", tags: new[] { "Interactions" }, Description = "Get the most recent RPC interaction for a given ConsumerId.")]
        [OpenApiSecurity("getLastRpc", SecuritySchemeType.OAuth2, Flows = typeof(ClientCredentialAuthFlow), Name = "authorization", In = OpenApiSecurityLocationType.Header)]
        [OpenApiParameter(name: "ocp-apim-subscription-key-south", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "south key header")]
        [OpenApiParameter(name: "ocp-apim-subscription-key-west", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "west key header")]
        [OpenApiParameter(name: "correlation-id", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "correlation-id header")]
        [OpenApiParameter(name: "username", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "username header")]
        [OpenApiParameter(name: "origin", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "origin header")]
        [OpenApiParameter(name: "consumerId", In = ParameterLocation.Path, Required = true, Type = typeof(long), Description = "The **consumerId** parameter")]
        [OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: "application/json", bodyType: typeof(InteractionMinimisedModel))]
        [Function("getLastRpc")]
        public async Task<IActionResult> GetLastRpc(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "consumer/{consumerId}/last/rpc")]
            HttpRequest request,
            long consumerId)
        {
            var command = await request.As<GetConsumerCommand>();
            command.ConsumerID = consumerId;

            if (command.IsMissingMetaData(out string errorMessage))
                return new BadRequestObjectResult(errorMessage);

            if (!await command.Validate(out string validationErrorMessage))
                return new BadRequestObjectResult(validationErrorMessage);

            using (var scope = _logger.BeginScope(command.CorrelationId))
            {
                try
                {
                    return await _functionManager.ExecuteGet<GetConsumerCommand, InteractionMinimisedModel>(
                        request.HttpContext,
                        (cmd) => _client.GetLastRpcInteraction(cmd)
                    );
                }
                catch (SqlException ex) when (ex.Number == -2)
                {
                    _logger.LogError(ex, $"SQL Timeout: {nameof(GetLastRpc)}");
                    return new StatusCodeResult((int)HttpStatusCode.RequestTimeout);
                }
            }
        }

        [OpenApiOperation(operationId: "getLast", tags: new[] { "Interactions" }, Description = "Get the most recent interaction for a given ConsumerId.")]
        [OpenApiSecurity("getLast", SecuritySchemeType.OAuth2, Flows = typeof(ClientCredentialAuthFlow), Name = "authorization", In = OpenApiSecurityLocationType.Header)]
        [OpenApiParameter(name: "ocp-apim-subscription-key-south", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "south key header")]
        [OpenApiParameter(name: "ocp-apim-subscription-key-west", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "west key header")]
        [OpenApiParameter(name: "correlation-id", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "correlation-id header")]
        [OpenApiParameter(name: "username", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "username header")]
        [OpenApiParameter(name: "origin", In = ParameterLocation.Header, Required = true, Type = typeof(string), Description = "origin header")]
        [OpenApiParameter(name: "consumerId", In = ParameterLocation.Path, Required = true, Type = typeof(long), Description = "The **consumerId** parameter")]
        [OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: "application/json", bodyType: typeof(InteractionMinimisedModel))]
        [Function("getLast")]
        public async Task<IActionResult> GetLast(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "consumer/{consumerId}/last")]
            HttpRequest request,
            long consumerId)
        {
            var command = await request.As<GetConsumerCommand>();
            command.ConsumerID = consumerId;

            if (command.IsMissingMetaData(out string errorMessage))
                return new BadRequestObjectResult(errorMessage);

            if (!await command.Validate(out string validationErrorMessage))
                return new BadRequestObjectResult(validationErrorMessage);

            using (var scope = _logger.BeginScope(command.CorrelationId))
            {
                try
                {
                    return await _functionManager.ExecuteGet<GetConsumerCommand, InteractionMinimisedModel>(
                        request.HttpContext,
                        (cmd) => _client.GetLastInteraction(cmd)
                    );
                }
                catch (SqlException ex) when (ex.Number == -2)
                {
                    _logger.LogError(ex, $"SQL Timeout: {nameof(GetLastRpc)}");
                    return new StatusCodeResult((int)HttpStatusCode.RequestTimeout);
                }
            }
        }
}
