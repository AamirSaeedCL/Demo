// Wrapper around Dapper's Query method
public interface IDatabaseService
{
    IEnumerable<T> Query<T>(string sql, object param = null);
}

public class DatabaseService : IDatabaseService
{
    private readonly IDbConnection _connection;

    public DatabaseService(IDbConnection connection)
    {
        _connection = connection;
    }

    public IEnumerable<T> Query<T>(string sql, object param = null)
    {
        return _connection.Query<T>(sql, param);
    }
}

// Then, in your test:
[TestMethod]
public void ExecuteQueries_SuccessfulExecution_LogsInformation()
{
    // Arrange
    var mockDatabaseService = new Mock<IDatabaseService>();
    mockDatabaseService
        .Setup(db => db.Query<object>(It.IsAny<string>(), null))
        .Returns(new List<object>()); // Mock your expected return

    SqlConnectionFactory.SetConnectionFactory(() => _mockDbConnection.Object);
    _databaseService = new DatabaseService(_mockDbConnection.Object);

    // Act
    _databaseService.ExecuteQueries();

    // Assert
    _mockLogger.Verify(x => x.LogInformation(It.Is<string>(s => s.StartsWith("Running query"))), Times.Exactly(_config.DMQueries.Count()));
    _mockLogger.Verify(x => x.LogInformation(It.Is<string>(s => s.StartsWith("Returned"))), Times.Exactly(_config.DMQueries.Count()));
}
