




  services.AddDbContext<InteractionContext>(options =>
  {
      options.UseSqlServer(configuration.GetConnectionString("CabotApiInteractionStage"));
  });


      public async Task<IEnumerable<InteractionMinimisedModel>> GetInteractions(GetInteractionsCommand command)
      {
          // return await _actionResultRepository.LogByUserActionConfig(command);

          // Get Category Rules from Interactions DB
          var sqlParameterConsumerID = new Microsoft.Data.SqlClient.SqlParameter("@consumerID", command.ConsumerID);
          var sqlParameterSkip = new Microsoft.Data.SqlClient.SqlParameter("@skip", command.Skip);
          var sqlParameterTake = new Microsoft.Data.SqlClient.SqlParameter("@take", command.Take);

          List<Interaction> spResult = new List<Interaction>();
          List<InteractionMinimisedModel> cachedResult = new List<InteractionMinimisedModel>();
          try
          {
              spResult = await _interactionContext.Interactions
                  .FromSqlRaw(
                      "EXEC dbo.usp_ObtainInteractions @consumerID, @skip, @take",
                      sqlParameterConsumerID,
                      sqlParameterSkip,
                      sqlParameterTake
                  )
                  .ToListAsync();
          }
          catch (SqlException sqlEx)
          {
            //  _logger.LogError(sqlEx, "SQL error occurred while executing usp_ObtainInteractions for ConsumerID: {ConsumerId}", sqlParameterConsumerID.Value);
          }
          catch (Exception ex)
          { 
            //  _logger.LogError(ex, "Unexpected error occurred while fetching interactions");
          }

          cachedResult.AddRange((IEnumerable<InteractionMinimisedModel>)spResult.Select(t => t.ToModel()));

          return cachedResult;

          // return new OkObjectResult(null);
      }
