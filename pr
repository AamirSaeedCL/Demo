public async Task<ObjectResult> GetInteractions(GetInteractionsCommand command)
{
    var sqlParameterConsumerID = new SqlParameter("@consumerID", command.ConsumerID);
    var sqlParameterSkip = new SqlParameter("@skip", command.Skip);
    var sqlParameterTake = new SqlParameter("@take", command.Take);

    using var context = _contextFactory.CreateDbContext();

    List<Interaction> spResult = new List<Interaction>();

    try
    {
        spResult = await context.Interactions
            .FromSqlRaw(
                "EXEC dbo.usp_ObtainInteractions @consumerID, @skip, @take",
                sqlParameterConsumerID,
                sqlParameterSkip,
                sqlParameterTake
            )
            .ToListAsync();
    }
    catch (Exception ex)
    {
        return new ObjectResult("Unexpected error occurred") { StatusCode = 500 };
    }

    var mappedResult = spResult.Select(t => t.ToModel()).ToList();

    return new OkObjectResult(mappedResult);
}

using CCM.DebtManager.ActionResult.Core.Entities;
using CCM.DebtManager.ActionResult.Core.Models;
using System;

namespace CCM.DebtManager.ActionResult.Subscriber.Mappers
{
    public static class InteractionEntityToModelMapper
    {
        public static InteractionMinimisedModel ToModel(this Interaction entity)
        {
            if (entity is null)
                throw new ArgumentNullException($"Ensure '{nameof(entity)}' entity is also provided");

            return new InteractionMinimisedModel
            {
                CategoryName = entity.CategoryName,
                CategoryRuleDescription = entity.CategoryRuleName,
                ActionCodeText = entity.ActionCodeShortName,
                ResultCodeText = entity.ResultCodeShortName,
                IsRPC = entity.IsRPC,
                MaterialLogo = entity.MaterialLogo,
                ActionResultContent = entity.Message,
                CreatedByUserName = entity.UpsertUserName,
                CreatedDateTime = entity.UpsertDateTime
            };
        }
    }
}
