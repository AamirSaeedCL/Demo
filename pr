using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Dapper;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;

public class Worker : IHostedService, IDisposable
{
    private readonly ILogger<Worker> _logger;
    private readonly IDatabaseService _databaseService;
    private readonly ITimerService _timerService;

    public Worker(ILogger<Worker> logger, IDatabaseService databaseService, ITimerService timerService)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _databaseService = databaseService ?? throw new ArgumentNullException(nameof(databaseService));
        _timerService = timerService ?? throw new ArgumentNullException(nameof(timerService));
    }

    public Task StartAsync(CancellationToken cancellationToken)
    {
        try
        {
            _timerService.Start(DoWork, TimeSpan.Zero, TimeSpan.FromMinutes(2));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while starting the worker.");
            throw;
        }

        return Task.CompletedTask;
    }

    private void DoWork()
    {
        try
        {
            _databaseService.ExecuteQueries();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while executing queries.");
        }
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        try
        {
            _timerService.Stop();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while stopping the worker.");
            throw;
        }

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        try
        {
            _timerService.Dispose();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while disposing the timer service.");
            throw;
        }
    }
}

public interface IDatabaseService
{
    void ExecuteQueries();
}

public class DatabaseService : IDatabaseService
{
    private readonly ILogger<DatabaseService> _logger;
    private readonly POCConfig _config;

    public DatabaseService(ILogger<DatabaseService> logger, POCConfig config)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _config = config ?? throw new ArgumentNullException(nameof(config));
    }

    public void ExecuteQueries()
    {
        try
        {
            using var connection = new SqlConnection(_config.ConnectionString);
            foreach (var sqlCommandText in _config.DMQueries)
            {
                _logger.LogInformation($"Running query {sqlCommandText}");
                var rows = connection.Query<dynamic>(sqlCommandText);
                _logger.LogInformation($"Returned {rows.Count()} rows");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while executing queries.");
            throw;
        }
    }
}

public interface ITimerService : IDisposable
{
    void Start(Action callback, TimeSpan dueTime, TimeSpan period);
    void Stop();
}

public class TimerService : ITimerService
{
    private readonly ILogger<TimerService> _logger;
    private Timer? _timer;

    public TimerService(ILogger<TimerService> logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public void Start(Action callback, TimeSpan dueTime, TimeSpan period)
    {
        try
        {
            _timer = new Timer(_ => callback(), null, dueTime, period);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while starting the timer.");
            throw;
        }
    }

    public void Stop()
    {
        try
        {
            _timer?.Change(Timeout.Infinite, 0);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while stopping the timer.");
            throw;
        }
    }

    public void Dispose()
    {
        try
        {
            _timer?.Dispose();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while disposing the timer.");
            throw;
        }
    }
}

public class POCConfig
{
    public string ConnectionString { get; set; }
    public List<string> DMQueries { get; set; }
}
