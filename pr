Pull Request Description
Overview
This pull request introduces several significant improvements to the Engage.Dataselection.Service.POC worker service. The enhancements focus on exception handling, configurability, codebase refactoring, and adopting modern C# best practices to improve maintainability, performance, and scalability.

Features and Changes
Exception Handling:

Implemented comprehensive exception handling across all service methods.
Ensured that errors are properly logged and managed without disrupting the service workflow.
Specific exceptions are caught and logged where necessary to allow the service to recover or fail gracefully.
Configurable Interval:

Moved the 2-minute interval configuration to an external configuration file.
Enabled greater flexibility and easier adjustments without modifying the codebase.
The interval value is read from the configuration file at runtime and used to control the timer for periodic tasks.
Codebase Refactoring:

Refactored the existing codebase to improve structure, readability, and adherence to modern C# best practices.
Adopted SOLID principles to enhance maintainability and scalability.
Single Responsibility Principle: Each class has a single responsibility.
Open/Closed Principle: Classes are open for extension but closed for modification.
Liskov Substitution Principle: Objects of a superclass should be replaceable with objects of subclasses without affecting the application.
Interface Segregation Principle: Clients should not be forced to depend on interfaces they do not use.
Dependency Inversion Principle: High-level modules should not depend on low-level modules. Both should depend on abstractions.
Ensured that all asynchronous operations utilize async/await for better performance and responsiveness.
Enhanced dependency injection to ensure all dependencies are injected through constructors, promoting testability and decoupling.
Leveraged the latest features and enhancements provided by .NET 8, such as IAsyncDisposable for async resource management and PeriodicTimer for periodic tasks.
Enhanced logging to provide detailed and actionable insights into the service's operation, making it easier to diagnose and troubleshoot issues.
Used the built-in configuration system of .NET to manage application settings, ensuring that configuration values are easy to manage and override in different environments.
Detailed Changes
Exception Handling:

Wrapped all service methods in try-catch blocks to ensure exceptions are caught and logged.
Implemented specific exception handling to capture and log different types of exceptions.
Configurable Interval:

Added configuration settings to appsettings.json for the interval duration.
Modified the worker service to read the interval setting from the configuration file.
Codebase Refactoring:

Restructured classes and methods to follow SOLID principles.
Updated asynchronous methods to use async/await.
Refactored constructor injections to improve dependency management.
Implemented .NET 8 features for better resource management and periodic task handling.
Improved logging to capture detailed information about service operations.
Centralized configuration management using .NET's built-in configuration system.
Testing
Comprehensive unit tests were added and updated to ensure full coverage of the new features and refactored code.
Integration tests were performed to validate the correct interaction between components and the proper handling of configurations.
Conclusion
These changes aim to significantly improve the overall quality, performance, and maintainability of the Engage.Dataselection.Service.POC worker service, ensuring it meets modern software development standards and is prepared for future enhancements.
